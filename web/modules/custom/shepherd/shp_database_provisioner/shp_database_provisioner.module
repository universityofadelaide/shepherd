<?php

/**
 * @file
 * Contains shp_database_provisioner.module.
 */

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function shp_database_provisioner_node_insert(EntityInterface $entity) {
  $config = \Drupal::config('shp_database_provisioner.settings');
  if ($entity->bundle() === 'shp_environment' && $config->get('enabled')) {
    /** @var \Drupal\shp_orchestration\OrchestrationProviderInterface $orchestration_provider_plugin */
    $orchestration_provider_plugin = \Drupal::service('plugin.manager.orchestration_provider')->getProviderInstance();

    if (isset($entity->field_shp_site->target_id)) {
      $site = $entity->get('field_shp_site')
        ->first()
        ->get('entity')
        ->getTarget()
        ->getValue();

      if (isset($site->field_shp_project->target_id)) {
        $project = $site->get('field_shp_project')
          ->first()
          ->get('entity')
          ->getTarget()
          ->getValue();
      }
      else {
        // @todo Handle errors.
        return FALSE;
      }
    }
    else {
      // @todo Handle errors.
      return FALSE;
    }

    $deployment_name = $orchestration_provider_plugin::generateDeploymentName(
      $project->getTitle(),
      $site->field_shp_short_name->value,
      $entity->id()
    );

    // Construct credentials for the new environment.
    $env_db_database = 'env_' . $entity->id();
    $env_db_username = 'user_' . $entity->id();
    $env_db_password = \Drupal::service('shp_custom.password')->generate();

    // Add database credentials to deployment secret.
    // Create the secret if it doesn't exist, otherwise add it to the existing.
    if ($env_secret = $orchestration_provider_plugin->getSecret($deployment_name)) {
      $secret_result = $orchestration_provider_plugin->updateSecret(
        $deployment_name,
        array_merge($env_secret, ['DATABASE_PASSWORD' => $env_db_password])
      );
    }
    else {
      $secret_result = $orchestration_provider_plugin->createSecret(
        $deployment_name,
        ['DATABASE_PASSWORD' => $env_db_password]
      );
    }
    if (!$secret_result) {
      // @todo Handle errors.
      return FALSE;
    }

    // Fetch privileged database password from orchestration secret store.
    $privileged_db_password = $orchestration_provider_plugin->getSecret($config->get('secret'), 'DATABASE_PASSWORD');

    $db = new mysqli(
      $config->get('host'),
      $config->get('user'),
      $privileged_db_password,
      NULL,
      $config->get('port'),
      NULL
    );

    $query = sprintf('CREATE DATABASE `%s`', $env_db_database);
    $statement = $db->prepare($query);
    if ($statement === NULL) {
      // @todo Handle errors.
      return FALSE;
    }
    $statement->execute();

    $query = sprintf(
      "GRANT ALL PRIVILEGES ON `%s`.* TO `%s`@`%%` IDENTIFIED BY '%s'",
      $env_db_database,
      $env_db_username,
      $env_db_password
    );
    $statement = $db->prepare($query);
    if ($statement === NULL) {
      // @todo Handle errors.
      return FALSE;
    }
    $statement->execute();
  }

  return TRUE;
}

/**
 * Implements hook_shp_env_vars().
 */
function shp_database_provisioner_shp_env_vars(EntityInterface $entity) {
  $config = \Drupal::config('shp_database_provisioner.settings');
  return [
    'DATABASE_HOST' => $config->get('host'),
    'DATABASE_PORT' => $config->get('port'),
    'DATABASE_NAME' => 'env_' . $entity->id(),
    'DATABASE_USER' => 'user_' . $entity->id(),
    // The following path is based on convention set in:
    // OpenShiftOrchestrationProvider::setupVolumes()
    // The 'default' deployment config secret is mounted at /etc/secret.
    'DATABASE_PASSWORD_FILE' => '/etc/secret/DATABASE_PASSWORD',
  ];
}
