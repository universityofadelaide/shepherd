<?php

/**
 * @file
 * Contains shp_custom.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\shp_orchestration\Exception\OrchestrationProviderNotConfiguredException;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_help().
 */
function shp_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the shp_custom module.
    case 'help.page.shp_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module provides functionality specific to the Shepherd.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_toolbar().
 */
function shp_custom_toolbar() {
  // Load the menu tree for shepherd.
  $menu_tree = \Drupal::service('toolbar.menu_tree');
  $parameters = new MenuTreeParameters();
  $parameters->setMinDepth(2)->setMaxDepth(2)->onlyEnabledLinks();
  $tree = $menu_tree->load('shepherd', $parameters);
  $links = $menu_tree->build($tree);

  // Declare our custom tab and tray.
  $items['shepherd'] = [
    '#cache' => [
      'contexts' => [
        'user.permissions',
      ],
    ],
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => t('Shepherd'),
      '#url' => Url::fromRoute('<front>'),
      '#attributes' => [
        'title' => t('Shepherd menu'),
        'class' => ['toolbar-icon', 'toolbar-icon-system-admin-structure'],
        // A data attribute that indicates to the client to defer loading of
        // the admin menu subtrees until this tab is activated. Admin menu
        // subtrees will not render to the DOM if this attribute is removed.
        // The value of the attribute is intentionally left blank. Only the
        // presence of the attribute is necessary.
        'data-drupal-subtrees' => '',
      ],
    ],
    'tray' => [
      '#heading' => t('Shepherd menu'),
      '#attached' => '',
      'shepherd' => $links,
    ],
    '#weight' => -20,
  ];

  return $items;
}

/**
 * Implements hook_toolbar_alter().
 */
function shp_custom_toolbar_alter(&$items) {
  // Remove 'Manage' item from toolbar if user cannot administer stuff.
  if (!\Drupal::currentUser()->hasPermission('administer nodes')) {
    unset($items['administration']);
  }
}

/**
 * Generate a list of projects for a select list.
 *
 * @todo No longer used, delete this.
 *
 * @return array
 *   The choices formatted as id => label.
 */
function shp_custom_projects() {
  $ids = \Drupal::entityQuery('node')
    ->condition('type', 'shp_project')
    ->sort('title', 'ASC')
    ->execute();

  $entities = Node::loadMultiple($ids);

  $choices = [];
  foreach ($entities as $entity) {
    $choices[$entity->id()] = $entity->getTitle();
  }

  return $choices;
}

/**
 * Invalidate site entity caches because environments for sites have changed.
 *
 * @param Drupal\node\NodeInterface $environment
 *   The environment node entity whose site needs cache invalidate.
 */
function shp_custom_invalidate_site_cache(NodeInterface $environment) {
  $site_nid = $environment->field_shp_site->target_id;
  if ($site_nid) {
    \Drupal::service('cache_tags.invalidator')->invalidateTags(['node:' . $site_nid]);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Triggers things when an instance's status is changed to archive.
 */
function shp_custom_node_update(NodeInterface $node) {

  if (strpos($node->bundle(), 'shp') !== FALSE) {
    try {
      /** @var Drupal\shp_orchestration\OrchestrationProviderInterface $orchestration_provider_plugin */
      $orchestration_provider_plugin = \Drupal::service('plugin.manager.orchestration_provider')
        ->getProviderInstance();
    }
    catch (OrchestrationProviderNotConfiguredException $e) {
      drupal_set_message($e->getMessage(), 'warning');
      return FALSE;
    }
  }
  else {
    return NULL;
  }

  switch ($node->getType()) {
    case 'shp_site':
      if ($node->moderation_state->value == 'archived') {
        $backup = \Drupal::service('shp_backup.backup');
        $environments = \Drupal::entityQuery('node')
          ->condition('type', 'shp_environment')
          ->condition('field_shp_site', $node->id())
          ->execute();

        foreach ($environments as $environment_id) {
          $environment = Node::load($environment_id);
          if ($environment->moderation_state->value != 'archived') {

            // Create the backup node and perform a backup
            $backup->createBackupNode($node, $environment, NULL, TRUE);

            // @todo Shepherd: Need to queue to enable this part.
            //if (!$result = $orchestration_provider_plugin->archivedEnvironment($entity->id())) {
            //  return $result;
            //}
          }
        }
      }
      break;
    case 'shp_environment':
      if ($node->moderation_state->value == 'archived') {
        $backup = \Drupal::service('shp_backup.backup');
        $site = Node::load($node->field_shp_site->target_id);

        // Create the backup node and perform a backup
        $backup->createBackupNode($site, $node, NULL, TRUE);

        // @todo Shepherd: Need to queue to enable this part.
        //$result = $orchestration_provider_plugin->archivedEnvironment($entity->id());
        shp_custom_invalidate_site_cache($node);
      }
      else {
        // @todo Shepherd: Add new environment to reverse proxy.
        // @todo Shepherd: Published environments should trigger re-deploy.
        // @todo Shepherd: Move state transitioning to environment?
      }
      break;
  }

}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Triggers jenkins when site instances are deleted.
 *
 * @todo Shepherd: Don't do this at all and archive sites and environments.
 * @todo Shepherd: Move the decommissioning to environment update hook.
 */
function shp_custom_node_delete(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'shp_environment':
      shp_custom_invalidate_site_cache($entity);
      break;
  }
}

/**
 * Implements hook_node_access().
 *
 * Prevent production environments from being deleted.
 */
function shp_custom_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if ($node->bundle() === 'shp_environment') {
    if ($op === 'delete') {
      if ($environment_term = Term::load($node->field_shp_environment_type->target_id)) {
        if ($environment_term->field_shp_protect->value) {
          return AccessResult::forbidden();
        }
      }
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_type_insert().
 *
 * @todo Shepherd: Modify this to be useful in some way. When environment ready?
 */
function shp_custom_comment_insert(EntityInterface $entity) {
  // Send an email notification to the user who created a site instance.
  $commented_entity = $entity->getCommentedEntity();

  if ($commented_entity->getType() === "shp_site") {
    $author = $commented_entity->getRevisionAuthor();
    $author_email = $author->getEmail();

    $mail_message = [
      'author_name' => $author->getAccountName(),
      'message' => $entity->comment_body->value,
      'subject' => $entity->getSubject(),
    ];
    $langcode = $author->getPreferredLangCode();

    $result = \Drupal::service('plugin.manager.mail')->mail('shp_custom', 'shp_site', $author_email, $langcode, $mail_message);

    if ($result['result'] !== TRUE) {
      drupal_set_message(t('There was an issue sending an email notification to %email with message %msg', ['%email' => $author_email, '%msg' => $entity->comment_body->value]), 'error');
      return;
    }

    drupal_set_message(t('An email notification has been sent to %user', ['%user' => $author->getAccountName()]));
  }

}

/**
 * Implements hook_mail().
 */
function shp_custom_mail($key, &$message, $params) {
  // Set the content of the email message, escape any html prior to send.
  switch ($key) {
    case 'shp_site':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Site Instance : @subject', ['subject' => $params['subject']]);
      $message['body'][] = t('Hello @name,', ['name' => $params['author_name']]);
      $message['body'][] = Html::escape($params['message']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function shp_custom_form_node_shp_environment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  \Drupal::service('shp_custom.environment')->formAlter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function shp_custom_form_node_shp_site_form_alter(&$form, FormStateInterface $form_state) {
  Drupal::service('shp_custom.site')->formAlter($form, $form_state);
}

/**
 * Implements hook_operation_alter().
 */
function shp_custom_entity_operation_alter(array &$operations, EntityInterface $entity) {
  $account = \Drupal::currentUser();
  // Operations are applied to the shp_environment entity.
  // User must also have permission to create shp_backup entities.
  if ($entity->getEntityTypeId() === "node"
    && $entity->getType() === "shp_environment"
    && $account->hasPermission('create shp_backup content')) {
    \Drupal::service('shp_custom.environment')->operationsLinksAlter($operations, $entity);
  }
}
