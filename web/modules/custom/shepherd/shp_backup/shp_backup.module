<?php

/**
 * @file
 * Contains shp_backup.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\shp_backup\Service\EntityOperations;

/**
 * Implements hook_token_info().
 */
function shp_backup_token_info() {
  $info['types']['shepherd'] = [
    'name' => t('Shepherd'),
    'description' => t('Tokens related to shepherd.'),
  ];

  $info['tokens']['shepherd']['environment-type'] = [
    'name' => t('Environment type'),
    'description' => t('Output the environment type.'),
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function shp_backup_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  if ($type !== 'shepherd') {
    return [];
  }

  $replacements = [];

  foreach ($tokens as $name => $original) {
    switch ($name) {
      case 'environment-type':
        if ($data['environment']) {
          $environment_term = $data['environment']->field_shp_environment_type->entity;
          if ($environment_term) {
            $replacements[$original] = $environment_term->name->value;
          }
        }
    }
  }

  return $replacements;

}

/**
 * Implements hook_operation_alter().
 */
function shp_backup_entity_operation_alter(array &$operations, EntityInterface $entity) {
  $account = \Drupal::currentUser();
  // Operations are applied to the shp_environment entity.
  // User must also have permission to create shp_backup entities.
  if ($entity->getEntityTypeId() === 'node'
    && $entity->getType() === 'shp_environment'
    && $account->hasPermission('shp access environment wizard')) {
    \Drupal::service('shp_backup.backup')->operationsLinksAlter($operations, $entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function shp_backup_taxonomy_term_update(EntityInterface $entity) {
  /** @var \Drupal\shp_backup\Service\EntityOperations $operations */
  $operations = \Drupal::classResolver()->getInstanceFromDefinition(EntityOperations::class);
  $operations->taxonomyTermUpdate($entity);
}
